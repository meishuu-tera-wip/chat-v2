// Generated by CoffeeScript 1.9.3
var friends, guild, guildlogo, logos, self, settings;

guildlogo = require('guildlogo');

self = false;

guild = false;

friends = {
  note: '',
  groups: {},
  friends: {}
};

settings = {};

logos = {};

module.exports = function(ipc, web, io) {
  web.use(web["static"](__dirname + '/www'));
  ipc.on('self', function(mySelf) {
    self = mySelf;
    return io.emit('self', self);
  });
  ipc.on('chatSettings', function(chatSettings) {
    settings = chatSettings;
    return io.emit('chatSettings', settings);
  });
  ipc.on('guild', function(myGuild) {
    guild = myGuild;
    return io.emit('guild', guild);
  });
  ipc.on('friends', function(myFriends) {
    friends = myFriends;
    return io.emit('friends', myFriends);
  });
  ipc.on('guildLogo', function(guildId, logo) {
    logo = new Buffer(logo, 'base64');
    return guildlogo.convert(logo, function(err, res) {
      if (err == null) {
        logos[guildId] = 'data:image/png;base64,' + res.toString('base64');
        return io.emit('logo', guildId, logos[guildId]);
      }
    });
  });
  ipc.on('friendsUpdate', function(updates) {
    var friend, id, k, v;
    for (id in updates) {
      friend = updates[id];
      for (k in friend) {
        v = friend[k];
        friends.friends[id][k] = v;
      }
    }
    return io.emit('friendsUpdate', updates);
  });
  ipc.on('sChat', function(event) {
    return io.emit('sChat', {
      author: {
        id: event.authorID,
        name: event.authorName
      },
      channel: event.channel,
      time: Date.now(),
      message: event.message
    });
  });
  ipc.on('sWhisper', function(event, sent) {
    return io.emit('sChat', {
      author: {
        id: event.player,
        name: (sent ? event.recipient : event.author)
      },
      sent: sent,
      channel: 7,
      time: Date.now(),
      message: event.message
    });
  });
  ipc.on('sUpdateGuildMember', function(event) {
    var k, member, v;
    if (member = guild.members[event.playerID]) {
      for (k in event) {
        v = event[k];
        member[k] = v;
      }
    }
    return io.emit('sUpdateGuildMember', event);
  });
  return io.on('connection', function(socket) {
    var gid, logo;
    socket.emit('self', self);
    socket.emit('chatSettings', settings);
    socket.emit('friends', friends);
    socket.emit('guild', guild);
    for (gid in logos) {
      logo = logos[gid];
      socket.emit('logo', gid, logo);
    }
    socket.on('chat', function(channel, message) {
      return ipc.emit('chat', channel, message);
    });
    return socket.on('whisper', function(target, message) {
      return ipc.emit('whisper', target, message);
    });
  });
};
